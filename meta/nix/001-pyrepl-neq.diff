diff --git a/pyrepl/_minimal_curses.py b/pyrepl/_minimal_curses.py
index 79af03f..71d17bb 100644
--- a/pyrepl/_minimal_curses.py
+++ b/pyrepl/_minimal_curses.py
@@ -26,7 +26,7 @@ def _find_clib():
     raise ImportError("curses library not found")
 
 _clibpath = _find_clib()
-clib = ctypes.cdll.LoadLibrary(_clibpath)
+clib = ctypes.CDLL(_clibpath)
 
 clib.setupterm.argtypes = [ctypes.c_char_p, ctypes.c_int,
                            ctypes.POINTER(ctypes.c_int)]
diff --git a/pyrepl/keymaps.py b/pyrepl/keymaps.py
index 76ba896..7d5f6f2 100644
--- a/pyrepl/keymaps.py
+++ b/pyrepl/keymaps.py
@@ -62,7 +62,7 @@ reader_emacs_keymap = tuple(
      (r'\M-\n', 'self-insert'),
      (r'\<backslash>', 'self-insert')] + \
     [(c, 'self-insert')
-     for c in map(chr, range(32, 127)) if c <> '\\'] + \
+     for c in map(chr, range(32, 127)) if c != '\\'] + \
     [(c, 'self-insert')
      for c in map(chr, range(128, 256)) if c.isalpha()] + \
     [(r'\<up>', 'up'),
@@ -101,7 +101,7 @@ python_emacs_keymap = comp_emacs_keymap + (
     
 reader_vi_insert_keymap = tuple(
     [(c, 'self-insert')
-     for c in map(chr, range(32, 127)) if c <> '\\'] + \
+     for c in map(chr, range(32, 127)) if c != '\\'] + \
     [(c, 'self-insert')
      for c in map(chr, range(128, 256)) if c.isalpha()] + \
     [(r'\C-d', 'delete'),
@@ -136,5 +136,5 @@ reader_keymaps = {
     'vi-command' : reader_vi_command_keymap
     }
 
-del c # from the listcomps
+# del c # from the listcomps
 
diff --git a/pyrepl/pygame_console.py b/pyrepl/pygame_console.py
index cb90b8b..58b775a 100644
--- a/pyrepl/pygame_console.py
+++ b/pyrepl/pygame_console.py
@@ -130,7 +130,8 @@ class PyGameConsole(Console):
         s.fill(c, [0, 600 - bmargin, 800, bmargin])
         s.fill(c, [800 - rmargin, 0, lmargin, 600])
 
-    def refresh(self, screen, (cx, cy)):
+    def refresh(self, screen, c):
+        cx, cy = c
         self.screen = screen
         self.pygame_screen.fill(colors.bg,
                                 [0, tmargin + self.cur_top + self.scroll,
@@ -282,7 +283,7 @@ class PyGameConsole(Console):
 
     def forgetinput(self):
         """Forget all pending, but not yet processed input."""
-        while pygame.event.poll().type <> NOEVENT:
+        while pygame.event.poll().type != NOEVENT:
             pass
     
     def getpending(self):
@@ -299,7 +300,7 @@ class PyGameConsole(Console):
 
     def wait(self):
         """Wait for an event."""
-        raise Exception, "erp!"
+        raise Exception("erp!")
 
     def repaint(self):
         # perhaps we should consolidate grobs?
diff --git a/pyrepl/pygame_keymap.py b/pyrepl/pygame_keymap.py
index 5531f1c..aad4b46 100644
--- a/pyrepl/pygame_keymap.py
+++ b/pyrepl/pygame_keymap.py
@@ -90,22 +90,20 @@ def _parse_key1(key, s):
                 s += 2
             elif c == "c":
                 if key[s + 2] != '-':
-                    raise KeySpecError, \
-                              "\\C must be followed by `-' (char %d of %s)"%(
-                        s + 2, repr(key))
+                    raise KeySpecError("\\C must be followed by `-' (char %d of %s)"%(
+                        s + 2, repr(key)))
                 if ctrl:
-                    raise KeySpecError, "doubled \\C- (char %d of %s)"%(
-                        s + 1, repr(key))
+                    raise KeySpecError("doubled \\C- (char %d of %s)"%(
+                        s + 1, repr(key)))
                 ctrl = 1
                 s += 3
             elif c == "m":
                 if key[s + 2] != '-':
-                    raise KeySpecError, \
-                              "\\M must be followed by `-' (char %d of %s)"%(
-                        s + 2, repr(key))
+                    raise KeySpecError("\\M must be followed by `-' (char %d of %s)"%(
+                        s + 2, repr(key)))
                 if meta:
-                    raise KeySpecError, "doubled \\M- (char %d of %s)"%(
-                        s + 1, repr(key))
+                    raise KeySpecError("doubled \\M- (char %d of %s)"%(
+                        s + 1, repr(key)))
                 meta = 1
                 s += 3
             elif c.isdigit():
@@ -119,22 +117,19 @@ def _parse_key1(key, s):
             elif c == '<':
                 t = key.find('>', s)
                 if t == -1:
-                    raise KeySpecError, \
-                              "unterminated \\< starting at char %d of %s"%(
-                        s + 1, repr(key))
+                    raise KeySpecError("unterminated \\< starting at char %d of %s"%(
+                        s + 1, repr(key)))
                 try:
                     ret = _keynames[key[s+2:t].lower()]
                     s = t + 1
                 except KeyError:
-                    raise KeySpecError, \
-                              "unrecognised keyname `%s' at char %d of %s"%(
-                        key[s+2:t], s + 2, repr(key))
+                    raise KeySpecError("unrecognised keyname `%s' at char %d of %s"%(
+                        key[s+2:t], s + 2, repr(key)))
                 if ret is None:
                     return None, s
             else:
-                raise KeySpecError, \
-                          "unknown backslash escape %s at char %d of %s"%(
-                    `c`, s + 2, repr(key))
+                raise KeySpecError("unknown backslash escape %s at char %d of %s"%(
+                    c, s + 2, repr(key)))
         else:
             if ctrl:
                 ret = chr(ord(key[s]) & 0x1f)   # curses.ascii.ctrl()
@@ -160,9 +155,8 @@ def _compile_keymap(keymap):
         r.setdefault(key[0], {})[key[1:]] = value
     for key, value in r.items():
         if value.has_key(()):
-            if len(value) <> 1:
-                raise KeySpecError, \
-                          "key definitions for %s clash"%(value.values(),)
+            if len(value) != 1:
+                raise KeySpecError("key definitions for %s clash"%(value.values(),))
             else:
                 r[key] = value[()]
         else:
@@ -202,7 +196,7 @@ def unparse_key(keyseq):
         return ''
     name, s = keyname(keyseq)
     if name:
-        if name <> 'escape' or s == len(keyseq):
+        if name != 'escape' or s == len(keyseq):
             return '\\<' + name + '>' + unparse_key(keyseq[s:])
         else:
             return '\\M-' + unparse_key(keyseq[1:])
@@ -226,7 +220,7 @@ def _unparse_keyf(keyseq):
         return []
     name, s = keyname(keyseq)
     if name:
-        if name <> 'escape' or s == len(keyseq):
+        if name != 'escape' or s == len(keyseq):
             return [name] + _unparse_keyf(keyseq[s:])
         else:
             rest = _unparse_keyf(keyseq[1:])
